/* @experimental CSS if() function - Chrome 137+ */
/* stylelint-disable */

/* 심볼 스타일 임포트 */
@import 'symbols.css';
:root {
  /* 기본 단위 */
  --unit: 24px;
  --border-width: 2px;

}

body {
  font-family: monospace;
  padding: 20px;
  max-width: 1200px;
  margin: 0 auto;
}

h1 {
  font-size: 24px;
  margin-bottom: 10px;
}

p {
  margin-bottom: 30px;
  color: #666;
}

pre {
  background: #f5f5f5;
  padding: 10px;
  border-radius: 4px;
  font-size: 12px;
  margin: 10px 0;
  overflow-x: auto;
}

main {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.gate {
  display: flex;
  flex-direction: column;
  gap: 8px;
}



/* 이진 값 표시용 공통 클래스 */
.bit {
  width: var(--unit);
  height: var(--unit);
  border: var(--border-width) solid black;
  display: inline-flex;
  box-sizing: border-box;
  background: if(style(--value: 1): black; else: white);
}

/* 입력 블록들 */
.a {
  --value: var(--a, 0);
}
.b {
  --value: var(--b, 0);
}
.cin {
  --value: var(--cin, 0);
}

/* AND Gate */
.and .out {
  --value: if(style(--a: 0): 0; style(--b: 0): 0; else: 1);
}

/* OR Gate */
.or .out {
  --value: if(style(--a: 1): 1; style(--b: 1): 1; else: 0);
}

/* NOT Gate */
.not .out {
  --value: if(style(--a: 1): 0; else: 1);
}

/* XOR Gate */
.xor .out {
  --value: if(
    style(--a: 0): if(style(--b: 1): 1; else: 0);
    style(--a: 1): if(style(--b: 0): 1; else: 0);
    else: 0
  );
}



.out:has(.bit) {
  border: none;
  display: inline-flex;
  width: auto;
  background-color: transparent;
}


.out:has(.bit) > .and, .or, .not, .xor {
  --a: var(--value);
}



.binary > .out {
  /* 현재 비트 값 계산 */
  --value: calc(mod(var(--dec, 0), 2));
  
  /* 다음 자릿수로 전달할 값 */
  --next-dec: calc(round(down, var(--dec, 0) / 2, 1));
  

  display: inline-flex;
  flex-direction: row-reverse;
  gap: 5px;
  
  &::before {
    content: "";
    display: inline-block;
    width: var(--unit);
    height: var(--unit);
    border: var(--border-width) solid black;

    background: rgb(
      calc((1 - var(--value)) * 255),
      calc((1 - var(--value)) * 255),
      calc((1 - var(--value)) * 255)
    );
  }
}


.out > .binary {
  --dec: var(--next-dec);
}




/* 7세그먼트 디스플레이 */
.seven-segment-container {
  display: flex;
  gap: 20px;
}

/* 4자리 디스플레이 */
.four-digit-display {
  display: flex;
  gap: 10px;
  
  /* 각 자리수 계산 */
  /* 천의 자리 */
  & > .digit:nth-child(1) {
    --num: calc(mod(round(down, var(--dec, 0) / 1000, 1), 10));
  }
  
  /* 백의 자리 */
  & > .digit:nth-child(2) {
    --num: calc(mod(round(down, var(--dec, 0) / 100, 1), 10));
  }
  
  /* 십의 자리 */
  & > .digit:nth-child(3) {
    --num: calc(mod(round(down, var(--dec, 0) / 10, 1), 10));
  }
  
  /* 일의 자리 */
  & > .digit:nth-child(4) {
    --num: calc(mod(var(--dec, 0), 10));
  }
}

.digit {
  position: relative;
  width: 60px;
  height: 110px;
  
  /* 세그먼트 a: 1,4에서만 꺼짐 */
  & > .segment.a {
    --off-at-1: calc(1 - abs(sign(var(--num) - 1)));
    --off-at-4: calc(1 - abs(sign(var(--num) - 4)));
    --on: calc(1 - max(var(--off-at-1), var(--off-at-4)));
  }
  
  /* 세그먼트 b: 5,6에서만 꺼짐 */
  & > .segment.b {
    --off-at-5: calc(1 - abs(sign(var(--num) - 5)));
    --off-at-6: calc(1 - abs(sign(var(--num) - 6)));
    --on: calc(1 - max(var(--off-at-5), var(--off-at-6)));
  }
  
  /* 세그먼트 c: 2에서만 꺼짐 */
  & > .segment.c {
    --off-at-2: calc(1 - abs(sign(var(--num) - 2)));
    --on: calc(1 - var(--off-at-2));
  }
  
  /* 세그먼트 d: 1,4,7에서만 꺼짐 */
  & > .segment.d {
    --off-at-1: calc(1 - abs(sign(var(--num) - 1)));
    --off-at-4: calc(1 - abs(sign(var(--num) - 4)));
    --off-at-7: calc(1 - abs(sign(var(--num) - 7)));
    --on: calc(1 - max(max(var(--off-at-1), var(--off-at-4)), var(--off-at-7)));
  }
  
  /* 세그먼트 e: 1,3,4,5,7,9에서 꺼짐 */
  & > .segment.e {
    --off-at-1: calc(1 - abs(sign(var(--num) - 1)));
    --off-at-3: calc(1 - abs(sign(var(--num) - 3)));
    --off-at-4: calc(1 - abs(sign(var(--num) - 4)));
    --off-at-5: calc(1 - abs(sign(var(--num) - 5)));
    --off-at-7: calc(1 - abs(sign(var(--num) - 7)));
    --off-at-9: calc(1 - abs(sign(var(--num) - 9)));
    /* 복잡한 max 중첩 */
    --max-1-3: max(var(--off-at-1), var(--off-at-3));
    --max-4-5: max(var(--off-at-4), var(--off-at-5));
    --max-7-9: max(var(--off-at-7), var(--off-at-9));
    --on: calc(1 - max(max(var(--max-1-3), var(--max-4-5)), var(--max-7-9)));
  }
  
  /* 세그먼트 f: 1,2,3,7에서 꺼짐 */
  & > .segment.f {
    --off-at-1: calc(1 - abs(sign(var(--num) - 1)));
    --off-at-2: calc(1 - abs(sign(var(--num) - 2)));
    --off-at-3: calc(1 - abs(sign(var(--num) - 3)));
    --off-at-7: calc(1 - abs(sign(var(--num) - 7)));
    --on: calc(1 - max(max(var(--off-at-1), var(--off-at-2)), max(var(--off-at-3), var(--off-at-7))));
  }
  
  /* 세그먼트 g: 0,1,7에서 꺼짐 */
  & > .segment.g {
    --off-at-0: calc(1 - abs(sign(var(--num) - 0)));
    --off-at-1: calc(1 - abs(sign(var(--num) - 1)));
    --off-at-7: calc(1 - abs(sign(var(--num) - 7)));
    --on: calc(1 - max(max(var(--off-at-0), var(--off-at-1)), var(--off-at-7)));
  }
}

/* 세그먼트 공통 스타일 */
.segment {
  position: absolute;
  background: rgb(
    calc(var(--on) * 0),
    calc(var(--on) * 0),
    calc(var(--on) * 0)
  );
  opacity: calc(0.1 + var(--on) * 0.9);
}

/* 가로 세그먼트 (a, d, g) */
.segment.a,
.segment.d,
.segment.g {
  width: 40px;
  height: 10px;
  left: 10px;
}

.segment.a { top: 0; }
.segment.g { top: 50px; }
.segment.d { bottom: 0; }

/* 세로 세그먼트 (b, c, e, f) */
.segment.b,
.segment.c,
.segment.e,
.segment.f {
  width: 10px;
  height: 40px;
}

.segment.b,
.segment.c {
  right: 0px;
}

.segment.b,
.segment.f {
  top: 10px;
}

.segment.c,
.segment.e {
  bottom: 10px;
}

/* Half Adder */
.half-adder {
  display: flex;
  gap: 10px;
  align-items: center;
}

/* Sum = A XOR B */
.half-adder .sum {
  --value: if(
    style(--a: 0): if(style(--b: 1): 1; else: 0);
    style(--a: 1): if(style(--b: 0): 1; else: 0);
    else: 0
  );
}

/* Carry = A AND B */
.half-adder .carry {
  --value: if(style(--a: 0): 0; style(--b: 0): 0; else: 1);
}

/* Full Adder */
.full-adder {
  display: flex;
  gap: 10px;
  align-items: center;
}

/* Full adder using two half adders */
.full-adder .sum {
  /* Sum = (A XOR B) XOR Cin */
  --half-sum: if(
    style(--a: 0): if(style(--b: 1): 1; else: 0);
    style(--a: 1): if(style(--b: 0): 1; else: 0);
    else: 0
  );
  
  --value: if(
    style(--half-sum: 0): if(style(--cin: 1): 1; else: 0);
    style(--half-sum: 1): if(style(--cin: 0): 1; else: 0);
    else: 0
  );
}

/* Carry = (A AND B) OR (Cin AND (A XOR B)) */
.full-adder .carry {
  /* A AND B */
  --carry1: if(style(--a: 0): 0; style(--b: 0): 0; else: 1);
  
  /* A XOR B */
  --xor-ab: if(
    style(--a: 0): if(style(--b: 1): 1; else: 0);
    style(--a: 1): if(style(--b: 0): 1; else: 0);
    else: 0
  );
  
  /* Cin AND (A XOR B) */
  --carry2: if(style(--cin: 0): 0; style(--xor-ab: 0): 0; else: 1);
  
  /* Final carry out */
  --value: if(style(--carry1: 1): 1; style(--carry2: 1): 1; else: 0);
}


